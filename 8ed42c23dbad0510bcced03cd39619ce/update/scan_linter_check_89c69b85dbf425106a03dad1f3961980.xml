<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>Any use of "jslog()" or "console.log()" (or any other console-based logging methods) lead to output on the console of the user's browser. Such output never makes it into a server log where administrators or developers can review it. Such output should be considered as debug output which should be avoided in production.  </description>
        <documentation_url/>
        <finding_type>scan_finding</finding_type>
        <name>CodeSanity - Client-side logging</name>
        <priority>1</priority>
        <resolution_details>Remove all console.log(), console.debug(), console.info(), console.warn(), console.error(), console.trace(), and jslog() statements.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {

    if (x_snc_codesanity.IsCheckApplicableToRecord())
	{	
		if (current.getRecordClassName() == 'sys_ui_script')
		{
			var strName = x_snc_devtools.GetStringValue(current.name);
			if (strName == 'x_snc_devtools.Debug'
			 || strName == 'x_snc_devtools.Log'
			 || strName == 'x_snc_devtools.LogError')
			{
				return;
			}
		}
		
		engine.rootNode.visit(function(node)
		{
	
			//console.*
			if (node.getTypeName() === 'GETPROP')
			{
				var bConsole = false;
				var bMethod = false;

				node.visit(function(childnode)
				{
					if (childnode.getTypeName() != 'NAME')
					{
						return;
					}

					if (childnode.getNameIdentifier() === 'log')
					{
						bMethod = true;
						return;
					}
					if (childnode.getNameIdentifier() === 'debug')
					{
						bMethod = true;
						return;
					}	
					if (childnode.getNameIdentifier() === 'info')
					{
						bMethod = true;
						return;
					}					
					if (childnode.getNameIdentifier() === 'warn')
					{
						bMethod = true;
						return;
					}
					if (childnode.getNameIdentifier() === 'error')
					{
						bMethod = true;
						return;
					}
					if (childnode.getNameIdentifier() === 'trace')
					{
						bMethod = true;
						return;
					}							
					if (childnode.getNameIdentifier() === 'console')
					{
						bConsole = true;
						return;
					}
				});

				//Create scan finding
				if (bConsole && bMethod) {
					engine.finding.incrementWithNode(node);
				}
			}

			//jslog
			var parentnode = node.getParent();
			if (node.getNameIdentifier()
				&& node.getTypeName() === 'NAME'
				&& node.getNameIdentifier() === 'jslog'
				&& parentnode.getTypeName() === 'CALL')
			{
				engine.finding.incrementWithNode(node);
			}

		});
		
	}

})(engine);]]></script>
        <short_description>Avoid client-side logging</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-02 13:09:20</sys_created_on>
        <sys_id>89c69b85dbf425106a03dad1f3961980</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>CodeSanity - Client-side logging</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_89c69b85dbf425106a03dad1f3961980</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-22 16:25:32</sys_updated_on>
    </scan_linter_check>
    <sys_translated_text action="delete_multiple" query="documentkey=89c69b85dbf425106a03dad1f3961980"/>
</record_update>
