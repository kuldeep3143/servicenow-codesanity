<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>A closing bracket followed by a dot indicates that the result from a function is assumed to be an object that contains a specific member. That however may lead to errors if the result is not an object or if a returned object does not contain the specified member or member function.&#13;
At the same time this check sanctions the questionable use of the method chaining pattern - which usually does not add any value and makes code more difficult to read.&#13;
Exceptions are made for the pattern "gs.getUser()" as it is nearly certain that gs.getUser() returns a valid GlideUser object.&#13;
Another exception is made for client side code in sp_widget records to allow the pattern: "server.update().then(" and patterns like "$('needle')." to support jquery.&#13;
The use of sn_fd.Flow_API.getRunner() also does not produce a finding, as this pattern is proposed by ServiceNow (unfortunately).&#13;
A finding may also indicate the use of the toString() method which may just be unnecessary - e.g. ".getDisplayValue().toString()". </description>
        <documentation_url/>
        <finding_type/>
        <name>CodeSanity - Bracket-dot anti-pattern</name>
        <priority>1</priority>
        <resolution_details>Assign the result of the function, then check the result explicitly and only reference member functions or values in the resulting object if it is confirmed.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

    if (x_snc_codesanity.IsCheckApplicableToRecord())
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var StringCheckRegEx = x_snc_devtools.StringCheckRegEx;
		var StringReplaceRegEx = x_snc_devtools.StringReplaceRegEx;
		var ScriptEmptyStringLiterals = x_snc_devtools.ScriptEmptyStringLiterals;

		var strSource = x_snc_devtools.GetStringValue(engine.rootNode.toSource());
		strSource = ScriptEmptyStringLiterals(strSource);
		
		if (GetStringValue(current.getRecordClassName()) == 'sp_widget')
		{
			if (StringCheckRegEx(strSource,'(?<!\\$\\(.*|server\\.update\\()\\)\\s*\\.','j') == true)
			{
				engine.finding.incrementWithNode(engine.rootNode);
			}
		}
		else
		{
			strSource = StringReplaceRegEx(strSource,
				'sn_fd\\s*\\.\\s*Flow_API\\s*\\.\\s*getRunner\\s*\\([a-zA-Z0-9\'"\\-_\\s\\(\\)\\.]+;',
				'','');
		
			if (StringCheckRegEx(strSource,'(?<!gs\\.getUser\\()\\)\\s*\\.','j') == true)
			{
				engine.finding.incrementWithNode(engine.rootNode);
			}
		}

		// the modifier 'j' causes the use of the Java (not JS) based regex engine which supports negative lookbehinds. 
		// https://community.servicenow.com/community?id=community_article&sys_id=243449861be230d017d162c4bd4bcb3c	
	}

})(engine);]]></script>
        <short_description>Avoid the bracket-dot anti-pattern</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-18 17:50:00</sys_created_on>
        <sys_id>9aeab277dbfe4550bcced03cd396194d</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>CodeSanity - Bracket-dot anti-pattern</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_9aeab277dbfe4550bcced03cd396194d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-08 08:32:54</sys_updated_on>
    </scan_linter_check>
</record_update>
