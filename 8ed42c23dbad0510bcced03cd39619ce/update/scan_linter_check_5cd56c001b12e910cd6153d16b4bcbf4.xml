<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>Many Application Files may contain scripts. More complex scripts (more lines of code or statements) are usually more difficult to maintain and to test. Some places make it easier to maintain and test code than others.&#13;
Script Includes and UI Scripts are more suitable places for complex scripts than Business Rules and UI Actions or ACLs.&#13;
If complex logic is implemented as separate classes or functions it is easier to test them separately.&#13;
Scripts contained in Application Files that "inject" functionality or "hook" into transactions (like Business Rules, ACLs, UI Actions, Scheduled Jobs and many more) can not be tested without actually triggering the mechanism that activates the script contained in the Application File - e.g. in case of a Business Rule that responds to a record update, a record needs to be created and updated in order to trigger the rule and to test the code that is contained in the Business Rule.&#13;
&#13;
The following record classes are allowed to contain high complex scripts with more than 80 lines:&#13;
sys_script_include&#13;
sys_ui_script&#13;
sys_extension_point&#13;
sys_ui_page&#13;
sp_widget&#13;
sp_angular_provider&#13;
sys_atf_step_config&#13;
scan_table_check&#13;
scan_linter_check&#13;
scan_column_type_check&#13;
scan_script_only_check&#13;
x_snc_reactor_component&#13;
&#13;
The following record classes may contain medium complex scripts (more than 40 lines):&#13;
sys_ui_action&#13;
sys_ws_operation</description>
        <documentation_url/>
        <finding_type>scan_finding</finding_type>
        <name>CodeSanity - Complex scripts in the right place</name>
        <priority>1</priority>
        <resolution_details>Refactor complex code contained in Application Files (like Business Rules, UI Actions, ACLs, etc.) into classes and functions defined in Script Includes or UI Scripts.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	if (x_snc_codesanity.IsCheckApplicableToRecord())
	{
		var ArrayValueExists = x_snc_devtools.ArrayValueExists;
		var GetStringValue = x_snc_devtools.GetStringValue;
		var ScriptEmptyStringLiterals = x_snc_devtools.ScriptEmptyStringLiterals;
		var ScriptRemoveComments = x_snc_devtools.ScriptRemoveComments;
		var StringCheckRegEx = x_snc_devtools.StringCheckRegEx;
		
		var strClassName = current.getRecordClassName();
		
		var aHighComplexityClassNames = [
			'sys_script_include',
			'sys_ui_script',
			'sys_extension_point',
			'sys_ui_page',
			'sp_widget',
			'sp_angular_provider',
			'sys_atf_step_config',
			'scan_table_check',
			'scan_linter_check',
			'scan_column_type_check',
			'scan_script_only_check',
			'x_snc_reactor_component'
			];

		var aMediumComplexityClassNames = [
			'sys_ui_action',
			'sys_ws_operation'
			];
		
		
		if (ArrayValueExists(aHighComplexityClassNames,strClassName) == false)
		{
			var bComplexScript = false;
			
			var strSource = GetStringValue(engine.rootNode.toSource());
			strSource = ScriptEmptyStringLiterals(strSource);
			strSource = ScriptRemoveComments(strSource);
			
			var nMaxLines = 40;
			
			if (ArrayValueExists(aMediumComplexityClassNames,strClassName) == true)
			{
				nMaxLines = 80;
			}
			
			if (StringCheckRegEx(strSource,'(.*\\n){'+nMaxLines+'}','i') == true)
			{
				bComplexScript = true;
			}

			if (bComplexScript == true)
			{
				engine.finding.increment();
			}
			
		}
	}

})(engine);]]></script>
        <short_description>Complex scripts should be in the right place (e.g. Script Includes)</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-14 11:29:17</sys_created_on>
        <sys_id>5cd56c001b12e910cd6153d16b4bcbf4</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>CodeSanity - Complex scripts in the right place</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_5cd56c001b12e910cd6153d16b4bcbf4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-25 13:44:51</sys_updated_on>
    </scan_linter_check>
</record_update>
