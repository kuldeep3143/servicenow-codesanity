<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>Sys IDs should not be stated explicitly in source code. Code should be independent of specific records in the platform.&#13;
Exceptions are AppInstall(), AppSetDefaults(), AppBaseline() and AppBuilder() functions which may have to refer to specific records to perform changes during installation or application creation.&#13;
Another exception are GetLinkDirectory() functions which may contain Sys IDs as part of links.&#13;
Fix Scripts (sys_script_fix) are not checked either, as they may have to refer to specific records for one-off activities during deployments.&#13;
The DevTools functions RunScriptInScope(), InstanceReset() and IsUserDefaultAdmin() must also refer to specific records by design in order to work - and hence are not checked either.</description>
        <documentation_url/>
        <finding_type/>
        <name>CodeSanity - Sys IDs in scripts</name>
        <priority>1</priority>
        <resolution_details>Refactor code to move Sys IDs into system properties or into another dynamic source - or retrieve the Sys IDs of records dynamically.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {
	
    if (x_snc_codesanity.IsCheckApplicableToRecord())
	{	
	
		var GetStringValue = x_snc_devtools.GetStringValue;
		var StringCheckRegEx = x_snc_devtools.StringCheckRegEx;
		var StringReplace = x_snc_devtools.StringReplace;

		
		var strTable = GetStringValue(current.getRecordClassName());
		var bException = false;

		if (strTable == 'sys_script_fix')
		{
			bException = true;
		}
		else if (strTable == 'sys_script_include')
		{
			var strName = GetStringValue(current.name);
			var strApiName = GetStringValue(current.api_name);

			if (strName.indexOf('GetLinkDirectory') != -1)
			{
				// Any GetLinkDirectory function may contain Sys IDs as it may contain links to specific OOTB records or community articles etc.  
				bException = true;
			}
			else if (strName == 'AppInstall')
			{
				// AppInstall functions may have to refer to specific OOTB or other records to make modifications
				// AppInstall is intended to be run only once after a deployment which does not make it prone to
				// introduce runtime issues.
				bException = true;
			}
			else if (strName == 'AppBuilder')
			{
				// AppBuilder functions may have to refer to specific OOTB or other records to built an application
				// AppBuilder is intended to be run only once during the whole life cycle of an application.
				bException = true;
			}
			else if (strName == 'AppBaseline')
			{
				// AppBaseline functions are run while an application is baselined. They may have to make modifications to specific records that may be identified by their Sys IDs
				bException = true;
			}				
			else if (strName == 'AppSetDefaults')
			{
				// AppSetDefaults functions are run while an application is baselined to set system properties to their default values. Such system properties may contain Sys IDs.
				bException = true;
			}				
			else if (strApiName == 'x_snc_devtools.IsUserDefaultAdmin')
			{
				// The sole purpose of IsUserDefaultAdmin is to check a given sys_id against the sys_id of the default OOTB admin
				// user - hence the exception.
				bException = true;
			}
			else if (strApiName == 'x_snc_devtools.RunScriptInScope')
			{
				// The x_snc_devtools.RunScriptInScope must refer to a specific script include record to work.
				bException = true;
			}
			else if (strApiName == 'x_snc_devtools.InstanceReset')
			{
				// The x_snc_devtools.InstanceReset as the name suggests makes changes to various OOTB records and is intended to
				// be run only once during the life cycle of an instance.
				bException = true;
			}
			else if (strApiName == 'x_snc_devtools.AppSanity')
			{
				// The x_snc_devtools.AppSanity functions cleans up application files from a scoped application.
				// Most of them are created or modified by the platform due to errors.
				// Some of them can be identified systematically, others are referenced by their SysIds.
				bException = true;
			}
		}

		if (bException == false)
		{
			var strSource = x_snc_devtools.GetStringValue(engine.rootNode.toSource());
			strSource = StringReplace(strSource,' ','');
			strSource = StringReplace(strSource,'\n','');
			strSource = StringReplace(strSource,'\r','');
			strSource = StringReplace(strSource,'"+"','');
			strSource = StringReplace(strSource,"'+'",'');
			
			if (StringCheckRegEx(strSource,'("|\')[0-9a-f]{32}("|\')','i') == true)
			{
				engine.finding.incrementWithNode(engine.rootNode);
			}
		}
	}

})(engine);]]></script>
        <short_description>Do not use Sys IDs in scripts</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-10 13:40:27</sys_created_on>
        <sys_id>9dda4d97dbce8510bcced03cd3961921</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>CodeSanity - Sys IDs in scripts</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_9dda4d97dbce8510bcced03cd3961921</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-25 11:18:17</sys_updated_on>
    </scan_linter_check>
    <sys_translated_text action="delete_multiple" query="documentkey=9dda4d97dbce8510bcced03cd3961921"/>
</record_update>
